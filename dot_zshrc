# zsh config 

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

############## powerlevel10k ###################

POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

p10k_colors () {

    for i in {0..255}; 
    do 
        print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; 
    done
}

################################################

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
    mkdir -p "$(dirname $ZINIT_HOME)"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load Zinit
source "${ZINIT_HOME}/zinit.zsh"

# ### Added by Zinit's installer
# if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
#     print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
#     command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
#     command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
#         print -P "%F{33} %F{34}Installation successful.%f%b" || \
#         print -P "%F{160} The clone has failed.%f%b"
# fi
#
# source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
# autoload -Uz _zinit
# (( ${+_comps} )) && _comps[zinit]=_zinit


# Add in Powerlevel10k
zinit ice depth=1; zinit light romkatv/powerlevel10k

# Add in zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# Add in snippets
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::archlinux
zinit snippet OMZP::aws
zinit snippet OMZP::kubectl
zinit snippet OMZP::kubectx
zinit snippet OMZP::command-not-found


# Auto load zsh-completion on start
autoload -U compinit && compinit -u 

zinit cdreplay -q

# History
HISTSIZE=5000
HISTFILE="$HOME/.zsh_history"
SAVEHIST=$HISTSIZE
HISTDUP=erase

setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ -f "$HOME"/.p10k.zsh ]] && source "$HOME"/.p10k.zsh; echo "sourced p10k"

# Keybindings
# bindkey '^f' autosuggest-accept
bindkey -e # emacs mode
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# Completion styling
zstyle ':completion:*' matcher_list 'm:{a-z}={A-Za-z}' # match case insensitive
# LS_COLORS='no=00;37:fi=00:di=00;33:ln=04;36:pi=40;33:so=01;35:bd=40;33;01:'
# export LS_COLORS
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'


################## Aliases ######################
# Aliases
alias envs='env | grep -i'

alias reload='source $HOME/.zshrc'
alias editrc='nvim $HOME/.zshrc'
alias editnvim='nvim $HOME/.config/nvim'

alias ls='ls -GFhsh'
alias ll='ls -lah'

alias mkdir='mkdir -p'
alias distro='cat /etc/*-release'
alias myip='curl http://ipecho.net/plain; echo'

alias server='python -m SimpleHTTPServer 8000'
alias npmhelp='chrome https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/npm'

alias show_remap='nvim $HOME/.config/nvim/lua/glouie/remap.lua'

alias pip='pip3'
alias python='python3'

alias cha='chezmoi add'
alias chu='chezmoi update'
alias chc='chezmoi cd'

#################################################

################## Homebrew #####################

export HOMEBREW_REPOSITORY=/home/linuxbrew/.linuxbrew/Homebrew
# eval "$(brew shellenv)"
[ -f "$HOMEBREW_REPOSITORY"/bin/brew ] && eval $("$HOMEBREW_REPOSITORY"/bin/brew shellenv)

[ -f /opt/homebrew/bin/brew ] && eval $(/opt/homebrew/bin/brew shellenv)

[ -f /usr/local/bin/brew ] && eval $(/usr/local/bin/brew shellenv)

# Install home brew if not found.
if ! type "brew" > /dev/null; then
    echo "brew was not found. Installing homebrew..."
    echo | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

################### zsh #########################
# install brew:
# /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#
# macOS: install XCode Command Line Tool
# $ xcode-select —-install
#
# Run the following command to install ZSH. It gets installed at /usr/local/bin/zsh PS: Mac’s default ZSH is at /bin/zsh
# brew install zsh
#
# Change the default shell
# chsh -s /usr/local/bin/zsh

# Install omg zsh from homebrew to use. Instead of the default zsh.
if ! type "zsh" > /dev/null; then
    echo "zsh was not found. Installing zsh from homebrew..."
    brew install zsh

    echo "Change the shell to the homebrew zsh."
    chsh -s zsh
    echo "Logout and Log back in."
fi

# Install Oh My ZSH
# https://github.com/ohmyzsh/ohmyzsh#manual-installation
#
# git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
# plugins=(git)
#
# source $ZSH/oh-my-zsh.sh
#

#################################################

################### Orca ########################

#<!-- START ORCA ALIAS -->
unalias orca 2>/dev/null
unalias orca_ssh 2>/dev/null
unalias orca_dev 2>/dev/null
unalias orca_debug_sh 2>/dev/null

latest_check() {
       # 1st argument is the repo to compare against, dev or prod
        repotarget=""
        shorttarget=""
        if [ "$1" = "dev" ]; then
          repotarget="repo.splunk.com/splunk/products/orca/branches/develop"
          shorttarget="splunk/products/orca/branches/develop"
        else
          repotarget="repo.splunk.com/splunk/products/orca"
          shorttarget="splunk/products/orca "
        fi
        fulltarget=$repotarget":latest"
        LOCAL_SHA=$(docker images --digests | grep "${repotarget}\s" | grep latest | awk -F' ' '{print$3}')
        REMOTE=$(ping -c 1 -t 3 repo.splunk.com 2>/dev/null)
        if [[ "$REMOTE" = *"0 packets received"* || "$REMOTE" = *"Unknown host"* || "$REMOTE" = "" ]]; then
          echo Connection to repo.splunk.com failed! Unable to check 'latest' image version.
        else
          command='curl -s "https://repo.splunk.com/artifactory/ui/views/dockerv2" -XPOST -H "Content-Type: application/json;charset=UTF-8" -H "Request-Agent: artifactoryUI" --data-binary '\''{"view":"dockerv2","repoKey":"docker-solutions-local","path":"'$shorttarget"/latest"'"}'\'' | python -c "from __future__ import print_function; import sys, json; print (json.load(sys.stdin)['\''tagInfo'\'']['\''digest'\''])"'
           REMOTE_SHA=$(eval $command)
           if [ "$LOCAL_SHA" != "$REMOTE_SHA" ]; then
             while true; do
               read "yn?There is a new version available for ORCA. Would you like to upgrade? [y/n] "
                 case $yn in
                   [Yy]* ) docker pull $fulltarget;
                           if [ $? -eq 0 ]; then
                                echo "Your local 'latest' ORCA image is up to date!";
                            else
                                echo "Error pulling 'latest' ORCA image";
                            fi
                     break;;
                   [Nn]* ) break;;
                   * ) echo 'Please enter yes or no.';;
                 esac
             done
             while true; do
               read "yn?Do you wish to remove old ORCA images? [y/n] "
                 case $yn in
                   [Yy]* ) docker images | grep $repotarget | awk -F' ' '{print$3}' | tail -n+4 | xargs docker rmi -f
                     echo "All ORCA images except the latest 3 have been removed!";
                     echo "Kept images:";
                     docker images | grep $repotarget;
                     echo;
                     break;;
                   [Nn]* ) break;;
                   * ) echo 'Please enter yes or no.';;
                 esac
              done
           fi
        fi
};

orca() {
    latest_check
    docker run --rm -it -e USER=$USER -e HOST_HOME=$HOME \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $HOME/.orca:/root/.orca \
        -v $HOME/.docker:/root/.docker \
        -v "$(pwd -P)":/orca-home repo.splunk.com/splunk/products/orca:latest \
        "$@"
};

orca_ssh() {
    latest_check
    docker run --rm -it -e USER=$USER -e HOST_HOME=$HOME \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $HOME/.orca:/root/.orca \
        -v $HOME/.ssh:/root/.ssh \
        -v $HOME/.docker:/root/.docker \
        -v "$(pwd -P)":/orca-home repo.splunk.com/splunk/products/orca:latest \
        "$@"
};

orca_dev() {
    latest_check dev
    docker run --rm -it -e USER=$USER -e HOST_HOME=$HOME \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $HOME/.orca:/root/.orca \
        -v $HOME/.docker:/root/.docker \
        -v "$(pwd -P)":/orca-home repo.splunk.com/splunk/products/orca/branches/develop:latest \
        "$@"
};

orca_debug_sh() {
    latest_check
    docker run --rm -it -e USER=$USER -e HOST_HOME=$HOME \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $HOME/.orca:/root/.orca \
        -v $HOME/.docker:/root/.docker \
        --entrypoint /bin/sh \
        -v "$(pwd -P)":/orca-home repo.splunk.com/splunk/products/orca:latest \
        "$@"
};

orca_beta() {
    latest_check
    docker run --rm -it -e USER=$USER -e HOST_HOME=$HOME \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $HOME/.orca:/root/.orca \
        -v $HOME/.docker:/root/.docker \
        -v "$(pwd -P)":/orca-home repo.splunk.com/splunk/products/orca:beta \
        "$@"
};

update_orca_alias() {
    sed -i '' '/#<!-- START ORCA ALIAS -->/,/#<!-- END ORCA ALIAS -->\n/d' $HOME/.zshrc
    curl -s https://repo.splunk.com/artifactory/Solutions/Common/misc/orca_zsh.sh >> $HOME/.zshrc
    echo "Please run 'source $HOME/.zshrc' or restart your shell."
};

update_orca_nfr_license() {
    curl -L -o $HOME/.orca/nfr_enterprise.lic http://go.splunk.com/splunk-nfr-license
};
#################################################

################### Virtualenv ##################

# Get Virtual Env
if [[ $VIRTUAL_ENV != "" ]]
then
    # Strip out the path and just leave the env name
    # venv="${RED}(${VIRTUAL_ENV##*/})$ORIGINAL"
    venv="::${VIRTUAL_ENV##*/}:: "
else
    # In case you don't have one activated
    alias pipi='pip3.8 install -i https://repo.splunk.com/artifactory/api/pypi/pypi-local/simple --extra-index-url https://pypi.python.org/simple'
    venv=''
fi

alias py='/usr/bin/python'

if [ ! -d "$HOME/venv" ]; then
    mkdir -p "$(dirname $HOME/venv)"
fi

venv() {

    if (( "$#" < "1" ));
    then
        echo "** Usage: venv <virtualenv name>"
        return 1
    fi

    source "$HOME"/venv/$1/bin/activate
    source "$HOME"/.bashrc
}

#################################################

################### Pytest ######################
# export PYTEST_ADDOPTS="-x --index-wait=0 --browser=chrome"
# export PYTEST_ADDOPTS="-x --browser=chrome"

#################################################

################### Splunk ######################

export ORIG_PATH=$PATH
export PATH_HISTORY=$PWD
export PKG_HOME=$HOME/pkg
export GIT_HOME=$HOME/gitlab
export TEST_DIR=$GIT_HOME/qa/new_test
export SPLUNK_SRC=$GIT_HOME/qa

if [[ -z "$HOSTNAME" ]]
then
    export HOSTNAME=$(hostname)
fi
hostname=$HOSTNAME
export REPO=$GIT_HOME
# echo "hostname is: "$hostname

# Sauce Labs
# - either set or source a file containing the user and key
export SAUCE_USER=
export SAUCE_API_KEY=
[[ -f "$HOME"/.sauce_labs ]] && . "$HOME"/.sauce_labs

# Synergy path

export PATH=$PATH:$HOME/bin/synergy/

# Splunk Perforce alias

# source $HOME/.p4env
# alias p4='p4 login -s &> /dev/null || echo $P4PASSWD | p4 login &> /dev/null; p4 $*'

# MacPorts path variable

export PATH=/opt/local/bin:/opt/local/sbin:$PATH


# Splunk environment variables
[[ -r "$HOME"/.splunk_profile ]] && . "$HOME"/.splunk_profile

# My own bin directory for scripts, etc.
export PATH=$PATH:$HOME/bin/

# PYTHON STARTUP for autocompletion and history.
export PYTHONSTARTUP=$HOME/.pystartup

cd_splunk_src(){
    cd "$SPLUNK_SRC"/"$1" || return
}

cd_splunk_home(){
    cd "$SPLUNK_HOME"/"$1" || return
}

cd_git(){
    cd "$GIT_HOME"/"$1" || return
}

alias setcurrent='setupenv current'
alias cdr='cd $REPO'
alias cds='cd $HOME/gitlab/main/qa/new_test'
alias cdh='cd_splunk_home'
alias cdm='cd $HOME/gitlab/main'
alias cdl='cdr; cd new_test/lib'
alias cdt='cdr; cd new_test/tests'

alias splunkstart='$SPLUNK_HOME/bin/splunk start --accept-license --answer-yes'
alias splunksearch='$SPLUNK_HOME/bin/splunk search -auth admin:changeme'
alias splunkhome='echo $SPLUNK_HOME'
alias splunk='$SPLUNK_HOME/bin/splunk'
alias splunkstatus='$SPLUNK_HOME/bin/splunk status; $SPLUNK_HOME/bin/splunk show splunkd-port -auth "admin:changeme"; $SPLUNK_HOME/bin/splunk show web-port -auth "admin:changeme"; $SPLUNK_HOME/bin/splunk show kvstore-port -auth "admin:changeme"; $SPLUNK_HOME/bin/splunk show kvstore-status -auth "admin:changeme"'
alias splunkloglevel='splunk show log-level -auth "admin:changeme" | grep -i -A 1'
alias splunkinfo='echo "SPLUNK_HOME: $SPLUNK_HOME"; splunk status --accept-license; echo "SPLUNK_SRC: $SPLUNK_SRC"; echo "PYTHONPATH: $PYTHONPATH"'
alias rest='curl -k -u admin:changeme -X '

alias splunkqa='deactivate; source $HOME/.zshrc; source $HOME/venv/splunkqa/bin/activate; export REPO=$HOME/gitlab/main/qa; cdr'
alias htmlwd='deactivate; source $HOME/.zshrc; source $HOME/venv/htmlwd/bin/activate; export REPO=$HOME/gitlab/html-webdriver; cdr'
alias sui='deactivate; source $HOME/.zshrc; source $HOME/venv/splunkui/bin/activate; export REPO=$HOME/gitlab/splunk-ui-test-functional; cdr; export TEST_DIR=$REPO'
alias pipi='pip3.8 install -i https://repo.splunkdev.net/artifactory/api/pypi/pypi-local/simple --extra-index-url https://pypi.python.org/simple'
# alias pipi='pip3.8 install -i https://repo.splunk.com/artifactory/api/pypi/pypi-local/simple --extra-index-url https://pypi.python.org/simple'
alias pip-uninstall-all='pip3.8 freeze | grep -v "^-e" | grep -v "@" | xargs pip3.8 uninstall -y'
alias pip='pip3.8'

alias cleansplunkqa='deactivate; virtualenv --clear $HOME/venv/splunkqa; splunkqa; cd $HOME/gitlab/main/qa/new_test; pip install -U pip; pip install -r requirements.txt; pip install bpython pylint; setupcushy; export REPO=$HOME/gitlab/main/qa; cdr'

# ssh to remove dev boxes
alias ronnie='ssh glouie@ronnie'
alias wimpy='ssh glouie@wimpy'
alias mrt='ssh glouie@mtr'
alias jenkinsbox='ssh -L 5902:localhost:5902 glouie@qa-jenk-debugging-glouie.sv.splunk.com'


splunkseedpasswd(){
    echo "Setting up admin:changeme user..."
    echo "[user_info]\nUSERNAME = admin\nPASSWORD=changeme\n" > "$SPLUNK_HOME"/etc/system/local/user-seed.conf
}

function get_running_splunk_home(){
    process_num=$(ps ax | grep splunkd | grep -v "process-runner" | grep start | awk '{print $1}')
    spl_home=$(ps -E -ww -p "$process_num" | awk -F "SPLUNK_HOME=" '{print $2}' | awk -F " " '{print $1}')
    echo "${spl_home//[$'\t\r\n']}"

}

set2runningsplunk(){
    splhome=$(get_running_splunk_home)
    export SPLUNK_HOME=$splhome
}

stopsplunk(){
    splhome=$(get_running_splunk_home)
    "$splhome"/bin/splunk stop
}

restartsplunk(){
    splhome=$(get_running_splunk_home)
    "$splhome"/bin/splunk restart
}

#################################################

################### webpages ####################

alias suidocs='chrome https://splunkui.splunkeng.com/'
alias wtf='open https://confluence.splunk.com/display/PROD/Webdriver+Test+Framework'
alias mainrepo='open https://git.splunk.com/projects/SPLCORE/repos/main/qa/browse'
alias okta='open https://splunk.okta.com'

function flakyfe () {
    # usage: flakyfe test_something
    open "https://go/flaky-fe/$1"
}

function flakybe () {
    # usage: flakybe test_something
    open "https://go/flaky-be/$1"
}

function jira () {
    # usage: jira spl-12345
    open "https://splunk.atlassian.net/secure/QuickSearch.jspa?searchString=$1"
}

function gitlab () {
    # usage: gitlab hello
    open "https://cd.splunkdev.com/search?search=$1"
}

function splmain () {
    # usage: splmain hello
    # project id 7712 is "main"
    # group id 3228 is "Splunk Core aka splcore"
    open "https://cd.splunkdev.com/search?group_id=3228&project_id=7712&search=$1"
}

function chrome () {
    # chrome <page>
    /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome "$1"
}

#################################################

################### DATF ########################

alias datf='py.test --browser=chrome --html=report.html  --self-contained-html --deployment-type S1 --infra-type=ucp --local-instance --check-crash-logs --action-on-crash=stop --check-splunk-logs'
alias datfrm='py.test --browser=chrome --html=report.html  --self-contained-html --deployment-type S1 --infra-type=ucp --local-instance --diag --check-crash-logs --action-on-crash=stop --check-splunk-logs'
alias datfhl='py.test --browser=chrome --html=report.html  --self-contained-html --chrome-options="--headless" --deployment-type S1 --infra-type=ucp --local-instance --diag --check-crash-logs --action-on-crash=stop --check-splunk-logs'

#################################################

################### path history ################

savepath(){
    export PATH_HISTORY="$PWD"':'"$PATH_HISTORY"
    #echo $PATH_HISTORY
}

pwdh(){
    echo "$PATH_HISTORY"
}

pop_savepath(){
    export PREV_PATH=$(echo "$PATH_HISTORY" | cut -d ':' -f 1)
    export PATH_HISTORY=$(echo "$PATH_HISTORY" | cut -d ':' -f 2-)
}

alias cd='savepath;cd'
alias cdb='pop_savepath;cd $PREV_PATH;pop_savepath'

################### Grep ########################

# GREP_OPTIONS='--color=auto'
# GREP_COLORS='30;43'
alias grep='grep --color=auto'
# alias rgrep='grep --color=auto -ir'

#################################################

################### SSH #########################

sendsshkey(){

    # note: for it to work you need to make sure perms are right.
    # $ chmod 700 $HOME/.ssh
    # $ chmod 600 $HOME/.ssh/authorized_keys

    if (( "$#" < "1" ));
    then
        echo "** Usage: sendsshkey user@hostname"
        return 1
    fi
    cat "$HOME"/.ssh/id_rsa.pub | ssh "$1" 'cat >> $HOME/.ssh/authorized_keys'
}

#################################################

################### misc ########################

# remove jamf (no longer possible)
alias rmcasper='sudo /usr/sbin/jamf removeFramework'

# for osx: ex. fnr *.py s/this/that/g
alias fnr='find . -type f -name "{1}" -exec sed -i "" {2} {} +'

# pretty print csv as a table.
function printcsv()
{
    awk -F, '{for (i=1;i<=NF;++i) {if (NR>1) val[i] = "$i"; else key[i] = "$i"}} END {for (j=1;j<i;++j) printf("%2d%30s = %s\\n", j, key[j], val[j])}' "$1"
}

#################################################

################### sublime #####################
#
# https://www.sublimetext.com/docs/3/osx_command_line.html

alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl -a'
alias opensubldir='open $HOME/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/'

#################################################

# VLESS=$(find /usr/local/bin/nvim -name 'less.sh')
# if [ -n "$VLESS" ]; then
#     alias less="$VLESS"
# fi
# export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"
export LESS=" -R"

alias vim='nvim'
alias vi='nvim'

alias rmpyc='find . -name "*.pyc" -print0 | xargs -0 rm'
alias rmlog='find . -name "*.log" -print0 | xargs -0 rm'
alias rmhtml='find . -name "*.html" -print0 | xargs -0 rm'
alias rmxml='find . -name "*.xml" -print0 | xargs -0 rm'
alias rmpng='find . -name "screenshot*.png" -print0 | xargs -0 rm'
alias rmeggs='find . -name "*.egg-info" -print0 | xargs -0 rm -rf'
alias rmtestlogs='rmpyc;rmlog;rmhtml;rmxml;rmpng'

alias pyl='pylint -d "C0103,R0902,R0904,R0801,C0302,W0105,R0913"'

#################################################

################### Git #########################

function gitcreatebranch(){

    if (( "$#" < "2" ));
    then
        echo "** Usage: gitcreatebranch <new_branch> <upstream_branch>"
        return 1
    fi

    git checkout -b "$1"
    git push -u origin "$1"
    git branch --set-upstream-to="$2" "$1"
}

alias ga="git add"   
alias ga="git add -p"
alias gb="git branch"
alias gba="git branch -a"
alias gc="git commit -m"
alias gca="git commit -a -m"
alias gcat="git cat-file -p"
alias gco="git checkout"
alias gcoall="git checkout -- ."
alias gd="git diff"  
alias gpl="git pull"  
alias gps="git push"  
alias gr="git remote"
alias gre="git reset"
alias gs="git status"

#################################################

################### Docker ######################

# Docker
alias dco="docker compose"
alias dps="docker ps"
alias dpa="docker ps -a"
alias dl="docker ps -l -q"
alias dx="docker exec -it"

# Dirs
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

################### LazyGit #####################

alias lg='lazygit'

#################################################

################### PyCharm #####################

alias pycharm='/usr/local/bin/charm'

################### Jedi ########################

alias installjedivim='cd $HOME/.vim/bundle/ && git clone --recursive https://github.com/davidhalter/jedi-vim.git'
alias installjedi='pip install jedi'

#################################################

################### Vundle ######################

alias installvundle='git clone https://github.com/VundleVim/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim'

#################################################

################### drop keyboard ###############
# usage: masskbupdate massdrop_ctrl_config_ctrl__default_6087.bin
#
# you will need the mdloader_mac executable
# download here: https://github.com/Massdrop/mdloader/releases
#
# configure keyboard keys here:
#   https://drop.com/mechanical-keyboards/configurator/
#
# TODO: turn this alias to functions, aliases can't use positional params. 
# alias masskbupdate='./mdloader_mac --first --download $1 restart'

# alias samantha='bpython -i ids.py'

#################################################

################### NVM #########################
# NVM (Node Version Manager)
# Install: 
# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -f "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

alias prjson='python -m json.tool'

# TODO: fixme, i don't work in zsh
# function pj () {
#     # python3 - << EOF
#     #     import pprint
#     #     pprint.pprint("""'$args'""")
#     # EOF
#     PYCMD='import pprint; pprint.pprint("""'$@'""")'
#     python -c"$PYCMD"
# }

#################################################

################### GitLab ######################

# install: brew install glab
# https://glab.readthedocs.io/en/latest/intro.html
# https://github.com/profclems/glab#installation

export GITLAB_TOKEN=
export GITLAB_FEED_TOKEN=
export GITLAB_PERSONAL_TOKEN=
[[ -f "$HOME"/.gitlab_cred ]] && . "$HOME"/.gitlab_cred
# glab auth login --hostname cd.splunkdev.com --token $GITLAB_TOKEN

alias mymrs='glab mr list --author=@me'

#################################################

################### Vault #######################

# https://developer.hashicorp.com/vault/downloads
# https://developer.hashicorp.com/vault/tutorials/getting-started/getting-started-install
#
# To install
# brew tap hashicorp/tap
# brew install hashicorp/tap/vault

# To update
# brew upgrade hashicorp/tap/vault

export VAULT_ADDR=https://secrets.splunkit.io
export VAULT_NAMESPACE=eeff
# vault login -method=okta username=<USERNAME> (without @splunk.com. Example: psahasrabudhe)

# Enter password and Complete Okta MFA

export VAULT_NAMESPACE=eeff/application
# vault kv list kv_co2_stg
# vault kv get kv_co2_stg/svc-eecq-co2-stg  ---→ store this key on your local machine ( preferably under $HOME/.ssh/id_rsa and change key permissions: chmod 600 <KEY_PATH>)

#################################################

################ scm_breeze  ####################
# https://github.com/scmbreeze/scm_breeze

[ -s "/Users/glouie/.scm_breeze/scm_breeze.sh" ] && source "/Users/glouie/.scm_breeze/scm_breeze.sh"

#################################################

################### starship ####################

if ! type "starship" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install starship
    else
        echo "Can't install starship, because homebrew is not installed."
    fi
else
    export STARSHIP_CONFIG="$HOME"/.config/starship/starship.toml
    eval "$(starship init zsh)"
fi

#################################################

alias lc='colorls -lA --sd'

################## eza ##########################
# https://github.com/eza-community/eza?tab=readme-ov-file
# eza is an ls alternative tool

if ! type "eza" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install eza
    else
        echo "Can't install eza, because homebrew is not installed."
    fi
else
    alias ls='eza --icons=always'
    alias ll='eza -1GlTahx -L 1'
    alias tree='eza --tree'
fi

#################################################

################## bat ##########################
# bat is an less alternative tool

if ! type "bat" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install bat
        bat cache --build
    else
        echo "Can't install bat, because homebrew is not installed."
    fi
else
    export BAT_THEME="Catppuccin Mocha"
    alias less='bat --color=always'
    alias cat='bat --color=always'
fi

#################################################

############## ripgrep ##########################
# ripgrep is an grep alternative tool

if ! type "rg" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install ripgrep
    else
        echo "Can't install ripgrep, because homebrew is not installed."
    fi
# else
#     alias grep='rg'
fi

################################################

################# fzf ##########################
# fzf is a fuzzy finder tool.

if ! type "fzf" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install fzf
    else
        echo "Can't install fzf, because homebrew is not installed."
    fi
else
    eval "$(fzf --zsh)"
    [ -f "$HOME"/.fzf.zsh ] && source "$HOME"/.fzf.zsh
    
    export FZF_DEFAULT_OPTS="
    --preview-window=right,70% 
    --multi 
    --height=50%
    --min-height=10
    --border=double
    --prompt='find >'
    --info=inline
    --pointer='→'
    --marker=''
    --header='CTRL-c or Esc to quit'
    --preview '
     ([[ -f {} ]] && (bat --color=always {} || cat {} )) ||
     ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200'
    
    "
    # Use the CLI find to get all files, excluding any filepath
    # containing the string "git".
    # export FZF_DEFAULT_COMMAND='find . -type f ! -path "*git*"'

    # Use the CLI fd to respect ignore files (like '.gitignore'),
    # display hidden files, and exclude the '.git' directory.
    export FZF_DEFAULT_COMMAND='fd . --hidden'

    # Use the CLI ripgrep to respect ignore files (like '.gitignore'),
    # display hidden files, and exclude the '.git' directory.
    # export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
    op(){
        nvim $(fzf)
    }
fi

################################################

############## Zoxide ##########################
# Zoxide is a cd alternative tool

if ! type "zoxide" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install zoxide
    else
        echo "Can't install zoxide, because homebrew is not installed."
    fi
else
    eval "$(zoxide init --cmd cd zsh)"
fi

################################################

################### powerlevel10k ##############
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#
# p10k_colors () {
#
#     for i in {0..255}; 
#     do 
#         print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; 
#     done
# }
#
################################################

################### Yazi #######################

# Yazi is a terminal file manager.

if ! type "yazi" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install yazi ffmpegthumbnailer unar jq poppler fd ripgrep fzf zoxide  # font-symbols-only-nerd-font
    else
        echo "Can't install yazi, because homebrew is not installed."
    fi
else
    function yy() {
        yazi "$@" --cwd-file="$tmp"
        local tmp="$(mktemp -t "yazi-cwd")"
        if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
            cd -- "$cwd"
        fi
        rm -f -- "$tmp"
    }
fi

################################################

################### Atuin ######################
# Install: curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh
if [[ -e "$HOME/.atium/bin/env" ]]; then
    source "$HOME/.atuin/bin/env"
fi

if ! type "atuin" > /dev/null; then
    if type "brew" > /dev/null; then
        brew install atuin
    else
        echo "Can't install atuin, because homebrew is not installed."
    fi
else
    eval "$(atuin init zsh)"
fi
################################################

################### Cheat.sh ###################
# Installation instructions: 
#
# PATH_DIR="$HOME/bin"  # or another directory on your $PATH
# mkdir -p "$PATH_DIR"
# curl https://cht.sh/:cht.sh > "$PATH_DIR/cht.sh"
# chmod +x "$PATH_DIR/cht.sh"
# 
# Global install: 
#
# curl -s https://cht.sh/:cht.sh | sudo tee /usr/local/bin/cht.sh && sudo chmod +x /usr/local/bin/cht.sh
# 
# install rlwrap, to run in shell mode:
# sudo apt install rlwrap
# brew install rlwrap
#

export PATH_DIR="$HOME/bin"
export CHTSH_CONF="$HOME/.cht.sh/cht.sh.conf"

alias cht='cht.sh'

# to activate tab completion for cht.sh 
# 
# curl https://cheat.sh/:zsh > ~/.zsh.d/_cht
# echo 'fpath=(~/.zsh.d/ $fpath)' >> ~/.zshrc
#
# Open a new shell to load the plugin

fpath=(~/.zsh.d/ $fpath)

################################################

set -o vi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# orca aliases 
[[ -r ~/.orca_profile]] && . ~/.orca_profile

